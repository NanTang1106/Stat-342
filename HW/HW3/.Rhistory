sample <- rnorm(n=12, mean=220, sd=52)
t_result <- t.test(x=sample, mu=240, alternative='two.sided')
if (t_result$p.value <= alpha) {
reject_count <- reject_count + 1
}
}
t_power <- reject_count / sim_size
t_power
reject_count
# question 1 d
sample_sz_seq <- c(12,24,36,48,60,72,84,96)
length(sample_size_seq)
length(sample_sz_seq)
sample_sz_seq <- c(12,24,36,48,60,72,84,96)
power_seq <- rep(NA, length(sample_sz_seq))
for (i in sample_sz_seq) {
count <- 0
for (j in 1:sim_size) {
sample <- rnorm(n=i, mean=220, sd=52)
t_result <- t.test(x=sample, mu=240, alternative='two.sided')
if (t_result$p.value <= alpha) {
count <- count + 1
}
}
t_power <- count / sim_size
power_seq[j] <- t_power
}
power_seq
power_seq <- rep(NA, length(sample_sz_seq))
for (i in sample_sz_seq) {
count <- 0
for (j in 1:sim_size) {
sample <- rnorm(n=i, mean=220, sd=52)
t_result <- t.test(x=sample, mu=240, alternative='two.sided')
if (t_result$p.value <= alpha) {
count <- count + 1
}
}
t_power <- count / sim_size
power_seq[i] <- t_power
}
power_seq
length(power_seq)
power_seq <- rep(NA, length(sample_sz_seq))
for (i in 1:length(sample_sz_seq)) {
count <- 0
for (j in 1:sim_size) {
sample <- rnorm(n=sample_sz_seq[i], mean=220, sd=52)
t_result <- t.test(x=sample, mu=240, alternative='two.sided')
if (t_result$p.value <= alpha) {
count <- count + 1
}
}
t_power <- count / sim_size
power_seq[i] <- t_power
}
power_seq
?cbind
size_power_comp <- cbind(sample_sz_seq, power_seq)
colnames(size_power_comp)[,1] <- 'size'
colnames(size_power_comp)[,2] <- 'power'
size_power_comp
colnames(size_power_comp)[1] <- 'size'
colnames(size_power_comp)[2] <- 'power'
size_power_comp
for(j in 1:length(N_seq)){
N = N_seq[j]
X_uni = runif(N)
eva_uni = f_target(X_uni)
mean_eva[j] = mean(eva_uni)
}
mean_eva
1-exp(-1)
### showing the plot
plot(x=N_seq, y=mean_eva, pch=20, log="x", col="dodgerblue", cex=2)
abline(h=1-exp(-1), lwd=4, col="gray")
lines(x=N_seq, y=mean_eva, lwd=4, col="dodgerblue")
### repeat the plot
plot(NULL, ylim=c(0.6, 0.67), xlim=c(50, 1e6), log="x")
abline(h=1-exp(-1), lwd=4, col="gray")
N_seq = c(50,100, 500,1000, 5000,10000, 5e4, 1e5, 5e5, 1e6)
mean_eva = rep(NA, length(N_seq))
for(j in 1:length(N_seq)){
N = N_seq[j]
X_uni = runif(N)
eva_uni = f_target(X_uni)
mean_eva[j] = mean(eva_uni)
}
plot(x=N_seq, y=mean_eva, pch=20, log="x", col="dodgerblue", cex=2)
abline(h=1-exp(-1), lwd=4, col="gray")
lines(x=N_seq, y=mean_eva, lwd=4, col="dodgerblue")
plot(NULL, ylim=c(0.6, 0.67), xlim=c(50, 1e6), log="x")
abline(h=1-exp(-1), lwd=4, col="gray")
for(i_rep in 1:10){
mean_eva = rep(NA, length(N_seq))
for(j in 1:length(N_seq)){
N = N_seq[j]
X_uni = runif(N)
eva_uni = f_target(X_uni)
mean_eva[j] = mean(eva_uni)
}
points(x=N_seq, y=mean_eva, pch=20, col="dodgerblue")
lines(x=N_seq, y=mean_eva, lwd=2, col="dodgerblue")
}
col_new = colorRampPalette(c("red","skyblue","limegreen","tan","purple"))
# create a color palette that mix several color
col_new
col_new(10)
plot(x=1:10,y=1:10, col=col_new(10), pch=20, cex=5)
plot(NULL, ylim=c(0.6, 0.67), xlim=c(50, 1e6), log="x")
abline(h=1-exp(-1), lwd=4, col="gray")
col_curve = col_new(10)
for(i_rep in 1:10){
mean_eva = rep(NA, length(N_seq))
for(j in 1:length(N_seq)){
N = N_seq[j]
X_uni = runif(N)
eva_uni = f_target(X_uni)
mean_eva[j] = mean(eva_uni)
}
points(x=N_seq, y=mean_eva, pch=20, col=col_curve[i_rep])
lines(x=N_seq, y=mean_eva, lwd=2, col=col_curve[i_rep])
}
plot(NULL, ylim=c(0.6, 0.67), xlim=c(50, 1e6), log="x")
abline(h=1-exp(-1), lwd=4, col="gray")
col_curve = col_new(10)
for(i_rep in 1:10){
mean_eva = rep(NA, length(N_seq))
for(j in 1:length(N_seq)){
N = N_seq[j]
X_uni = runif(N)
eva_uni = f_target(X_uni)
mean_eva[j] = mean(eva_uni)
}
points(x=N_seq, y=mean_eva, pch=20, col=col_curve[i_rep])
lines(x=N_seq, y=mean_eva, lwd=2, col=col_curve[i_rep])
}
### change the color of curves
col_new = colorRampPalette(c("red","skyblue","limegreen","tan","purple"))
# create a color palette that mix several color
col_new
col_new(10)
plot(x=1:10,y=1:10, col=col_new(10), pch=20, cex=5)
plot(NULL, ylim=c(0.6, 0.67), xlim=c(50, 1e6), log="x")
abline(h=1-exp(-1), lwd=4, col="gray")
plot(x=N_seq, y=mean_eva, pch=20, log="x", col="dodgerblue", cex=2)
abline(h=1-exp(-1), lwd=4, col="gray")
lines(x=N_seq, y=mean_eva, lwd=4, col="dodgerblue")
col_new = colorRampPalette(c("red","skyblue","limegreen","tan","purple"))
# create a color palette that mix several color
col_new
col_new(10)
plot(x=N_seq, y=mean_eva, col=col_new(12), pch=20, log="x", col="dodgerblue", cex=2)
abline(h=1-exp(-1), lwd=4, col="gray")
lines(x=N_seq, y=mean_eva, lwd=4, col="dodgerblue")
size_power_comp$size
size_power_comp <- as.dataframe(cbind(sample_sz_seq, power_seq))
size_power_comp <- data.frame(cbind(sample_sz_seq, power_seq))
size_power_comp
colnames(size_power_comp)[1] <- 'size'
colnames(size_power_comp)[2] <- 'power'
size_power_comp
plot(x=size_power_comp$size, y=size_power_comp$power, col=col_new(12), pch=20, log="x",  cex=2)
abline(h=1-exp(-1), lwd=4, col="gray")
lines(x=N_seq, y=mean_eva, lwd=4, col="dodgerblue")
col_new = colorRampPalette(c("skyblue","limegreen","tan"))
# create a color palette that mix several color
col_new
col_new(10)
plot(x=size_power_comp$size, y=size_power_comp$power, col=col_new(12), pch=20, log="x",  cex=2)
plot(x=size_power_comp$size, y=size_power_comp$power, col=col_ramp(nrow(size_power_comp)),
pch=20, cex=2)
col_ramp = colorRampPalette(c("skyblue","limegreen","tan"))
plot(x=size_power_comp$size, y=size_power_comp$power, col=col_ramp(nrow(size_power_comp)),
pch=20, cex=2)
col_ramp = colorRampPalette(c("skyblue","limegreen"))
plot(x=size_power_comp$size, y=size_power_comp$power, col=col_ramp(nrow(size_power_comp)),
pch=20, cex=2)
plot(x=size_power_comp$size, y=size_power_comp$power, col=col_ramp(nrow(size_power_comp)),
pch=20, cex=2, xlim=c(0, 100))
plot(x=size_power_comp$size, y=size_power_comp$power, col=col_ramp(nrow(size_power_comp)),
pch=20, cex=2, xlim=c(10, 100))
plot(x=size_power_comp$size, y=size_power_comp$power, col=col_ramp(nrow(size_power_comp)),
pch=20, cex=2, xlim=c(10, 100), ylim=c(0.3, 1))
plot(x=size_power_comp$size, y=size_power_comp$power, col=col_ramp(nrow(size_power_comp)),
pch=20, cex=2, xlim=c(10, 100), ylim=c(0.3, 1.1))
plot(x=size_power_comp$size, y=size_power_comp$power, col=col_ramp(nrow(size_power_comp)),
pch=20, cex=2, xlim=c(10, 100), ylim=c(0.3, 1.0))
plot(x=size_power_comp$size, y=size_power_comp$power, col=col_ramp(nrow(size_power_comp)),
pch=20, cex=2, xlim=c(10, 100), ylim=c(0.2, 1.0))
lines(x=size_power_comp$size, y=size_power_comp$power lwd=3, col="purple")
lines(x=size_power_comp$size, y=size_power_comp$power, lwd=3, col="purple")
lines(x=size_power_comp$size, y=size_power_comp$power, lwd=3, col="skyblue")
plot(x=size_power_comp$size, y=size_power_comp$power, col=col_ramp(nrow(size_power_comp)),
pch=20, cex=2, xlim=c(10, 100), main='Size - Power Plot')
lines(x=size_power_comp$size, y=size_power_comp$power, lwd=3, col="skyblue")
plot(x=size_power_comp$size, y=size_power_comp$power, col=col_ramp(nrow(size_power_comp)),
pch=20, cex=2, xlim=c(10, 100), main='Size, Power Plot (\alpha)',
ylab='Power of t-test', xlab='Sample Size')
plot(x=size_power_comp$size, y=size_power_comp$power, col=col_ramp(nrow(size_power_comp)),
pch=20, cex=2, xlim=c(10, 100), main='Size, Power Plot (test size 0.1)',
ylab='Power of t-test', xlab='Sample Size')
plot(x=size_power_comp$size, y=size_power_comp$power, col=col_ramp(nrow(size_power_comp)),
pch=20, cex=2, xlim=c(10, 100), main='Size-Power Plot (test size 0.1)',
ylab='Power of t-test', xlab='Sample Size')
lines(x=size_power_comp$size, y=size_power_comp$power, lwd=3, col="skyblue")
sim_size <- 10000
sample_size <- 50
minunif_eva <- rep(NA, sim_size)
for (i in 1:simz_size) {
sample <- runif(sample_size)
minunif_eva[i] <- min(sample)
}
mean(minunif_eva)
sd(minunif_eva)
for (i in 1:sim_size) {
sample <- runif(sample_size)
minunif_eva[i] <- min(sample)
}
mean(minunif_eva)
sd(minunif_eva)
head(minunif_eva)
runif(10)
mean(minunif_eva)
sd(minunif_eva)
hist(minunif_eva, breaks=50, col=col_ramp(50))
hist(minunif_eva, breaks=20, col=col_ramp(50))
hist(minunif_eva, breaks=100, col=col_ramp(50))
hist(minunif_eva, breaks=50, col=col_ramp(50))
col_ramp = colorRampPalette(c("orange","limegreen"))
hist(minunif_eva, breaks=50, col=col_ramp(50))
col_ramp = colorRampPalette(c("orange","green"))
hist(minunif_eva, breaks=50, col=col_ramp(50))
col_ramp = colorRampPalette(c("blue","green"))
hist(minunif_eva, breaks=50, col=col_ramp(50))
col_ramp = colorRampPalette(c("red",'purple', "orange", 'yellow'))
hist(minunif_eva, breaks=50, col=col_ramp(50))
hist(minunif_eva, breaks=50, col=col_ramp(10))
hist(minunif_eva, breaks=50, col=col_ramp(30))
hist(minunif_eva, breaks=50, col=col_ramp(50))
col_ramp = colorRampPalette(c('purple', "orange", 'yellow'))
hist(minunif_eva, breaks=50, col=col_ramp(50))
col_ramp = colorRampPalette(c('yellow', "orange", 'yellow'))
hist(minunif_eva, breaks=50, col=col_ramp(50))
col_ramp = colorRampPalette(c('green','yellow', "orange"))
hist(minunif_eva, breaks=50, col=col_ramp(50))
col_ramp = colorRampPalette(c('limegreen','yellow', "orange"))
hist(minunif_eva, breaks=50, col=col_ramp(50))
col_ramp = colorRampPalette(c('limegreen','orange', "orange"))
hist(minunif_eva, breaks=50, col=col_ramp(50))
col_ramp = colorRampPalette(c('limegreen','blue', "orange"))
hist(minunif_eva, breaks=50, col=col_ramp(50))
col_ramp = colorRampPalette(c('limegreen','yellow', "orange"))
hist(minunif_eva, breaks=50, col=col_ramp(50))
?seq
hist(minunif_eva, breaks=50, col=col_ramp(50))
lines(x=x_value, y=exp50
)
x_value <- seq(from=0, to=max(minunif_eva), by=1000)
exp50 <- dexp(x_value)
hist(minunif_eva, breaks=50, col=col_ramp(50))
lines(x=x_value, y=exp50)
x_value
max(minunif_eva)
x_value <- seq(from=0, to=max(minunif_eva), by=1000)
x_value
?seq
x_value <- seq(from=0, to=max(minunif_eva), by=0.0001)
x_value <- seq(from=0, to=max(minunif_eva), by=0.001)
exp50 <- dexp(x_value)
col_ramp = colorRampPalette(c('limegreen','yellow', "orange"))
hist(minunif_eva, breaks=50, col=col_ramp(50))
lines(x=x_value, y=exp50)
exp50
exp50 <- pexp(x_value)
col_ramp = colorRampPalette(c('limegreen','yellow', "orange"))
hist(minunif_eva, breaks=50, col=col_ramp(50))
lines(x=x_value, y=exp50)
exp50
exp50 <- pexp(x_value, 50)
exp50
hist(minunif_eva, breaks=50, col=col_ramp(50))
lines(x=x_value, y=exp50)
hist(minunif_eva, breaks=50, col=col_ramp(50), probability=T)
lines(x=x_value, y=exp50, lwd=3)
hist(minunif_eva, breaks=50, col=col_ramp(50), probability=T)
x_value <- seq(from=0, to=max(minunif_eva), by=0.001)
exp50 <- pexp(x_value, 50) * 100 # to percentage
hist(minunif_eva, breaks=50, col=col_ramp(50), probability=T)
lines(x=x_value, y=exp50, lwd=3)
exp50 <- dexp(x_value, 50) * 100 # to percentage
col_ramp = colorRampPalette(c('limegreen','yellow', "orange"))
hist(minunif_eva, breaks=50, col=col_ramp(50), probability=T)
lines(x=x_value, y=exp50, lwd=3)
x_value
plot(x_value, exp50)
hist(minunif_eva, breaks=50, col=col_ramp(50), probability=T)
lines(x=x_value, y=exp50, lwd=3)
par(yaxs="i",las=1)
hist(minunif_eva, breaks=50, col=col_ramp(50), probability=T)
lines(x=x_value, y=exp50, lwd=3)
exp50 <- dexp(x_value, 50) * 10# to percentage
col_ramp = colorRampPalette(c('limegreen','yellow', "orange"))
hist(minunif_eva, breaks=50, col=col_ramp(50), probability=T)
lines(x=x_value, y=exp50, lwd=3)
exp50 <- dexp(x_value, 50)# to percentage
col_ramp = colorRampPalette(c('limegreen','yellow', "orange"))
hist(minunif_eva, breaks=50, col=col_ramp(50), probability=T)
lines(x=x_value, y=exp50, lwd=3)
lines(x=x_value, y=exp50, lwd=3, col='skyblue')
lines(x=x_value, y=exp50, lwd=3, col='orange')
col_ramp = colorRampPalette(c('skyblue','limegreen', "orange"))
hist(minunif_eva, breaks=50, col=col_ramp(50), probability=T)
lines(x=x_value, y=exp50, lwd=3, col='orange')
lines(x=x_value, y=exp50, lwd=3, col='purple')
legend(1, 95, legend='Exp(50)',
col='skyblue', lty=1:2, cex=0.8)
hist(minunif_eva, breaks=50, col=col_ramp(50), probability=T)
lines(x=x_value, y=exp50, lwd=3, col='purple')
legend(1, 95, legend='Exp(50)',
col='skyblue', lty=1:2, cex=0.8)
legend('topright', legend='Exp(50)',
col='skyblue', lty=1:2, cex=0.8)
legend('topright', legend='Exp(50)',
col='skyblue', lty=1:1, cex=1.5)
legend('topright', legend='Exp(50)',
col='skyblue', lty=1:1, cex=1)
grid(nx=NA,ny=NULL,lty=1,lwd=1,col="gray")
grid(nx=NA,ny=NULL,lty=1,lwd=0.5,col="gray")
hist(minunif_eva, breaks=50, col=col_ramp(50), probability=T)
lines(x=x_value, y=exp50, lwd=3, col='purple')
grid(nx=NA,ny=NULL,lty=1,lwd=0.5,col="gray")
legend('topright', legend='Exp(50)',
col='skyblue', lty=1:1, cex=1)
legend('topright', legend='Exp(50)',
col='purple', lty=1:1, cex=0.8)
hist(minunif_eva, breaks=50, col=col_ramp(50), probability=T)
lines(x=x_value, y=exp50, lwd=3, col='purple')
grid(nx=NA,ny=NULL,lty=1,lwd=0.5,col="gray")
legend('topright', legend='Exp(50)',
col='purple', lty=1:1, cex=0.8)
legend('topright', legend='Exp(50)',
col='purple', lty=1:2, cex=0.8)
hist(minunif_eva, breaks=50, col=col_ramp(50), probability=T)
lines(x=x_value, y=exp50, lwd=3, col='purple')
grid(nx=NA,ny=NULL,lty=1,lwd=0.5,col="gray")
legend('topright', legend='Exp(50)',
col='purple', lty=1:2, cex=0.8)
legend('topright', legend='Exp(50)',
col='purple', lty=2:1, cex=0.8)
legend('topright', legend='Exp(50)',
col='purple', lty=1:3, cex=0.8)
legend('topright', legend='Exp(50)',
col='purple', lty=1:6, cex=0.8)
hist(minunif_eva, breaks=50, col=col_ramp(50), probability=T)
lines(x=x_value, y=exp50, lwd=3, col='purple')
grid(nx=NA,ny=NULL,lty=1,lwd=0.5,col="gray")
legend('right', legend='Exp(50)',
col='purple', lty=1:2, cex=0.8)
plot(x=size_power_comp$size, y=size_power_comp$power, col=col_ramp(nrow(size_power_comp)),
pch=20, cex=2, xlim=c(10, 100), main='Size-Power Plot (test size 0.1)',
ylab='Power of t-test', xlab='Sample Size')
lines(x=size_power_comp$size, y=size_power_comp$power, lwd=3, col="skyblue")
grid(nx=NA,ny=NULL,lty=1,lwd=0.5,col="gray")
hist(minunif_eva, breaks=50, col=col_ramp(50), probability=T,
main='Histogram of M50 with Exponential(50)')
lines(x=x_value, y=exp50, lwd=3, col='purple')
grid(nx=NA,ny=NULL,lty=1,lwd=0.5,col="gray")
legend('right', legend='Exp(50)',
col='purple', lty=1:2, cex=0.8)
hist(minunif_eva, breaks=50, col='skyblue', probability=T,
main='Histogram of M50 with Exponential(50)')
lines(x=x_value, y=exp50, lwd=3, col='purple')
grid(nx=NA,ny=NULL,lty=1,lwd=0.5,col="gray")
legend('right', legend='Exp(50)',
col='purple', lty=1:2, cex=0.8)
sample_size <- 100
minunif_eva <- rep(NA, sim_size)
x_value <- seq(from=0, to=max(minunif_eva), by=0.001)
exp50 <- dexp(x_value, 100)
hist(minunif_eva, breaks=50, col='skyblue', probability=T,
main='Histogram of M50 with Exponential(50)')
lines(x=x_value, y=exp50, lwd=3, col='purple')
grid(nx=NA,ny=NULL,lty=1,lwd=0.5,col="gray")
legend('right', legend='Exp(50)',
col='purple', lty=1:2, cex=0.8)
hist(minunif_eva, breaks=50, col='skyblue', probability=T,
main='Histogram of M50 with Exponential(50)')
sample_size <- 100
minunif_eva <- rep(NA, sim_size)
for (i in 1:sim_size) {
sample <- runif(sample_size)
minunif_eva[i] <- min(sample)
}
x_value <- seq(from=0, to=max(minunif_eva), by=0.001)
exp50 <- dexp(x_value, 100)
hist(minunif_eva, breaks=50, col='skyblue', probability=T,
main='Histogram of M50 with Exponential(50)')
lines(x=x_value, y=exp50, lwd=3, col='purple')
grid(nx=NA,ny=NULL,lty=1,lwd=0.5,col="gray")
legend('right', legend='Exp(50)',
col='purple', lty=1:2, cex=0.8)
hist(minunif_eva, breaks=50, col='limegreen', probability=T,
main='Histogram of M100 with Exponential(100)')
hist(minunif_eva, breaks=50, col='orange', probability=T,
main='Histogram of M100 with Exponential(100)')
hist(minunif_eva, breaks=50, col='orange2', probability=T,
main='Histogram of M100 with Exponential(100)')
hist(minunif_eva, breaks=50, col='orange20', probability=T,
main='Histogram of M100 with Exponential(100)')
hist(minunif_eva, breaks=50, col='orange4', probability=T,
main='Histogram of M100 with Exponential(100)')
hist(minunif_eva, breaks=50, col='orange1', probability=T,
main='Histogram of M100 with Exponential(100)')
hist(minunif_eva, breaks=50, col='#a1d76a', probability=T,
main='Histogram of M100 with Exponential(100)')
hist(minunif_eva, breaks=50, col='#a1d76a', probability=T,
main='Histogram of M100 with Exponential(100)')
lines(x=x_value, y=exp50, lwd=3, col='#e9a3c9')
grid(nx=NA,ny=NULL,lty=1,lwd=0.5,col="gray")
legend('right', legend='Exp(100)',
col='#e9a3c9', lty=1:2, cex=0.8)
hist(minunif_eva, breaks=50, col='#b2df8a', probability=T,
main='Histogram of M100 with Exponential(100)')
lines(x=x_value, y=exp50, lwd=3, col='#1f78b4')
grid(nx=NA,ny=NULL,lty=1,lwd=0.5,col="gray")
legend('right', legend='Exp(100)',
col='#e9a3c9', lty=1:2, cex=0.8)
im_size <- 10000
sample_size <- 50
minunif_eva <- rep(NA, sim_size)
for (i in 1:sim_size) {
sample <- runif(sample_size)
minunif_eva[i] <- min(sample)
}
mean(minunif_eva)
sd(minunif_eva)
# question 2 b
x_value <- seq(from=0, to=max(minunif_eva), by=0.001)
exp50 <- dexp(x_value, 50)
hist(minunif_eva, breaks=50, col='skyblue', probability=T,
main='Histogram of M50 with Exponential(50)', xlab='M50')
lines(x=x_value, y=exp50, lwd=3, col='purple')
grid(nx=NA,ny=NULL,lty=1,lwd=0.5,col="gray")
legend('right', legend='Exp(50)',
col='purple', lty=1:2, cex=0.8)
sample_size <- 100
minunif_eva <- rep(NA, sim_size)
for (i in 1:sim_size) {
sample <- runif(sample_size)
minunif_eva[i] <- min(sample)
}
x_value <- seq(from=0, to=max(minunif_eva), by=0.001)
exp50 <- dexp(x_value, 100)
hist(minunif_eva, breaks=50, col='#b2df8a', probability=T,
main='Histogram of M100 with Exponential(100)', xlab='M100')
lines(x=x_value, y=exp50, lwd=3, col='#1f78b4')
grid(nx=NA,ny=NULL,lty=1,lwd=0.5,col="gray")
legend('right', legend='Exp(100)',
col='#1f78b4', lty=1:2, cex=0.8)
t.test(baby_dt[baby_dt$smoke==1,]$bwt, baby_dt[baby_dt$smoke==0,]$bwt)
getwd()
setwd('/Users/nantang/Google Drive/STAT 342/HW/HW3')
baby_dt <- read.table("babiesI.data", sep = "", header=T)
baby_dt <- baby_dt[(baby_dt$smoke==0 | baby_dt$smoke==1),]
t.test(baby_dt[baby_dt$smoke==1,]$bwt, baby_dt[baby_dt$smoke==0,]$bwt)
123 - 70
123+ 53
24*1.5
21*1.5
113-31.5
count(baby_dt[baby_dt$smoke==1,]$bwt>162 )
nrow(baby_dt[baby_dt$smoke==1,]$bwt>162 )
nrow(baby_dt[baby_dt$smoke==1,]$bwt[> 163])
count <- 0
for(i in baby_dt[baby_dt$smoke==1,]$bwt) {
if(i > 162) {
count <- count + 1
}
}
count
count <- 0
for(i in baby_dt[baby_dt$smoke==1,]$bwt) {
if(i <63) {
count <- count + 1
}
}
count
102-36
count <- 0
for(i in baby_dt[baby_dt$smoke==1,]$bwt) {
if(i <66) {
count <- count + 1
}
}
count
count <- 0
for(i in baby_dt[baby_dt$smoke==0,]$bwt) {
if(i <81.5) {
count <- count + 1
}
}
count
count <- 0
for(i in baby_dt[baby_dt$smoke==0,]$bwt) {
if(i > 165.5) {
count <- count + 1
}
}
count
phyper(9, 13, 17, 14)
1-phyper(9, 13, 17, 14)
